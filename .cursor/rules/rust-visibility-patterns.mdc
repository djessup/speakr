---
alwaysApply: false
---
# Rust Visibility Patterns

## Use `pub(crate)` for Internal APIs

When refactoring private functions that need to be accessible across modules within the same crate, use `pub(crate)` instead of `pub`:

### ✅ Correct Pattern
```rust
// For functions that should be accessible within the crate but not publicly exported
pub(crate) async fn load_settings_from_dir(dir: &PathBuf) -> Result<AppSettings, AppError> {
    // Implementation
}

pub(crate) fn validate_settings_directory_permissions(dir: &Path) -> Result<(), AppError> {
    // Implementation
}

pub(crate) struct BackendStatusService {
    // Internal service that other modules need
}
```

### ❌ Avoid `pub` for Internal Functions
```rust
// Only use `pub` if the function is part of the public crate API
// Most extracted functions should be `pub(crate)`
pub async fn internal_function() {  // Wrong - too visible
    // Implementation
}
```

## Module Re-Export Patterns

### In Module `mod.rs`
```rust
// Re-export what other modules within the crate need
pub(crate) use commands::*;
pub(crate) use persistence::*;
pub(crate) use validation::*;

// Only pub-export what external crates should access
pub use types::PublicType;
```

### In `lib.rs`
```rust
// Import what you need from modules
use crate::settings::commands::save_settings_internal;
use crate::services::status::get_backend_status_internal;

// Declare modules
mod settings;
mod services;
mod debug;
```

## Benefits of `pub(crate)`

- **Encapsulation**: Functions remain internal to the crate
- **Flexibility**: Allows module refactoring without breaking external APIs
- **Documentation**: Clear intent that function is for internal use
- **Compilation**: Enables cross-module access during refactoring
