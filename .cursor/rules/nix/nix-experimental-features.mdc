---
description: Run any flake or modern nix command with --extra-experimental-features "nix-command flakes" (or matching NIX_CONFIG) to enable required features.
globs: *.nix
alwaysApply: false
---

# Nix Experimental Features

Rules for using Nix experimental features consistently across the codebase.

<rule>
name: nix_experimental_features
description: Standards for using Nix experimental features and commands
filters:
  # Match any nix commands that might need experimental features
  - type: content
    pattern: "(?m)^\\s*nix\\s+(?:run|flake|develop|profile|registry|store|path|eval|build|shell|search|copy|edit|verify|why-depends|bundle|describe|hash|profile|realisation|repl)\\s+"
  # Match nix-prefetch-github specifically
  - type: content
    pattern: "(?m)^\\s*nix\\s+run\\s+nixpkgs#nix-prefetch-github\\s+"
  # Match nix build commands
  - type: content
    pattern: "(?m)^\\s*nix\\s+build\\s+"

actions:
  - type: reject
    conditions:
      - pattern: "^\\s*nix\\s+(?!--extra-experimental-features)"
        message: "Nix commands must include --extra-experimental-features when using flakes or new-style commands"
      - pattern: "--extra-experimental-features\\s+['\"]nix-command['\"](?![^'\"]*flakes)"
        message: "When using nix-command, also include flakes in experimental features"

  - type: suggest
    message: |
      When using Nix commands that require experimental features:

      1. Always include the --extra-experimental-features flag with both nix-command and flakes:
         ```bash
         # Bad: Missing experimental features
         nix build .#package
         nix run nixpkgs#package
         nix develop

         # Bad: Only including nix-command
         nix --extra-experimental-features 'nix-command' build .#package

         # Good: Including both required features
         nix --extra-experimental-features 'nix-command flakes' build .#package
         nix --extra-experimental-features 'nix-command flakes' run nixpkgs#package
         nix --extra-experimental-features 'nix-command flakes' develop
         ```

      2. For scripts and automation, consider setting the environment variable:
         ```bash
         export NIX_CONFIG="experimental-features = nix-command flakes"

         # Then commands can be run without the flag
         nix build .#package
         nix run nixpkgs#package
         ```

      3. Common commands requiring experimental features:
         ```bash
         # Building packages
         nix --extra-experimental-features 'nix-command flakes' build .#package

         # Running packages
         nix --extra-experimental-features 'nix-command flakes' run nixpkgs#package

         # Development shells
         nix --extra-experimental-features 'nix-command flakes' develop

         # Flake operations
         nix --extra-experimental-features 'nix-command flakes' flake update
         nix --extra-experimental-features 'nix-command flakes' flake check

         # Store operations
         nix --extra-experimental-features 'nix-command flakes' store verify
         nix --extra-experimental-features 'nix-command flakes' store gc
         ```

      4. For nix-prefetch-github specifically:
         ```bash
         nix --extra-experimental-features 'nix-command flakes' run nixpkgs#nix-prefetch-github -- \
           owner repo --rev master
         ```

      5. When using in CI/automation:
         - Set NIX_CONFIG in your CI environment
         - Or use a wrapper script that always includes the features
         - Document the requirement in CI configuration

examples:
  - input: |
      # Bad: Missing experimental features
      nix build .#package
      nix run nixpkgs#hello
      nix develop

      # Good: Includes required experimental features
      nix --extra-experimental-features 'nix-command flakes' build .#package
      nix --extra-experimental-features 'nix-command flakes' run nixpkgs#hello
      nix --extra-experimental-features 'nix-command flakes' develop
    output: "Correctly using Nix experimental features"

metadata:
  priority: high
  version: 2.0
</rule>
