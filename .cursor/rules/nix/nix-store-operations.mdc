---
description: Copy nix-store files to writable temp dirs before modifying, always give full $out paths when copying, and package test data via structured runCommand derivations.
globs: *.nix
alwaysApply: false
---
Rules for working with files in the nix store and managing test data.

<rule>
name: nix_store_operations
description: Standards for working with the nix store, particularly for test data and file operations
filters:
  - type: file_extension
    pattern: "\\.nix$"
  - type: content
    pattern: "(?m)^.*nix-store.*$|^.*runCommand.*$|^.*testFiles.*$"

actions:
  - type: reject
    conditions:
      - pattern: "cp -r \\$\\{[^}]+\\}/[^\\s]+ \\$out(?!/)"
        message: "Direct file copies to nix store output must specify full destination path"
      - pattern: "chmod.*\\$out"
        message: "Cannot modify permissions of files directly in nix store - copy to temporary location first"

  - type: suggest
    message: |
      Follow these conventions when working with the nix store:

      1. File Immutability:
         - Never attempt to modify files directly in the nix store
         - Copy files to a temporary location before modification
         - Make copied files writable with chmod after copying
         ```nix
         # Good: Copy and make writable
         cp -r "${storeFile}" "$TMPDIR/workingCopy"
         chmod -R +w "$TMPDIR/workingCopy"
         ```

      2. Test Data Management:
         - Create a separate derivation for test files
         - Preserve directory structure when copying
         - Use a declarative structure for test files
         ```nix
         testFilesInStore = runCommand "test-files-${name}" {} ''
           mkdir -p $out
           ${lib.concatMapStrings (tf: ''
             mkdir -p "$out/$(dirname "${tf.dest}")"
             cp -r "${tf.src}" "$out/${tf.dest}"
           '') testFiles}
         '';
         ```

      3. Test Environment Setup:
         - Create temporary directories for test execution
         - Copy files from store to temp directory
         - Make temp copies writable
         ```nix
         testScript = ''
           # Create temp dir
           TEST_TMPDIR=$(mktemp -d)
           trap 'rm -rf "$TEST_TMPDIR"' EXIT

           # Copy and prepare files
           cp -r "${testFilesInStore}/"* "$TEST_TMPDIR/"
           chmod -R +w "$TEST_TMPDIR"

           # Run tests
           cd "$TEST_TMPDIR"
           ...
         '';
         ```

      4. Directory Structure:
         - Always create parent directories before copying
         - Use full paths when copying to nix store
         - Maintain original directory structure
         ```nix
         mkdir -p "$out/$(dirname "${dest}")"
         cp -r "${src}" "$out/${dest}"
         ```

      5. Error Handling:
         - Use traps to clean up temporary files
         - Check for successful copies
         - Verify file permissions after operations
         ```nix
         trap 'rm -rf "$TMPDIR"' EXIT
         if ! cp -r "${src}" "$TMPDIR/"; then
           echo "Failed to copy files"
           exit 1
         fi
         ```

examples:
  - input: |
      # Bad: Direct modification in store
      chmod +w $out/testdata

      # Good: Copy to temp location first
      cp -r $out/testdata $TMPDIR/
      chmod -R +w $TMPDIR/testdata

  - input: |
      # Bad: Unstructured test files
      testFiles = ./testdata;

      # Good: Structured test files
      testFiles = [
        {
          src = ./testdata/initial;
          dest = "testdata/initial";
        }
        {
          src = ./testdata/expected;
          dest = "testdata/expected";
        }
      ];

  - input: |
      # Bad: Missing directory structure
      cp -r ${src} $out

      # Good: Preserving structure
      mkdir -p $out/$(dirname "${dest}")
      cp -r "${src}" "$out/${dest}"

metadata:
  priority: high
  version: 1.0
</rule>
