---
description: ALWAYS commit changes after each code modification using conventional commits format. Use `git add <specific-file1> <specific-file2>` for targeted staging. NEVER `git add .`
alwaysApply: true
---
<git_auto_commit type="rule" name="git-auto-commit">
After any code change or file modification, automatically create a Git commit with the following
process:

<commit_process>
0. TEST your changes using test suites. If none available STOP and ask the user to approve before
   continuing.
   - ONLY commit when your code works.
   - ONLY stop after you commit.
1. Stage ONLY modifications made as part of the current task being worked on (NEVER `git add .`)
   - ALWAYS `git add <specific-file1> <specific-file2>` for targeted staging
   - ONLY include files that were created or modified as part of the current task
   - Avoid staging unrelated files that may have been modified separately
2. Create a commit with conventional commits format
3. Include a concise explanation of what was changed and why
</commit_process>

<commit_message>
Use the following structure: `<type>[optional scope]: <description>`
</commit_message>

<conventional_commits_types>
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Code formatting changes
- `refactor`: Code refactoring
- `test`: Adding or modifying tests
- `chore`: Maintenance tasks
- `perf`: Performance improvements
- `ci`: CI configuration changes
- `build`: Build system changes
- `revert`: Reverts a previous commit
</conventional_commits_types>

<examples>
- `feat(auth): add user authentication system`
- `fix(api): resolve null pointer exception in user service`
- `docs(readme): update installation instructions`
- `refactor(utils): simplify date formatting functions`
</examples>

<commit_message_guidelines>
- **Title**: Use conventional commits format
- **Body**: Concisely explain:
  - What was changed
  - Why the change was made
  - Reference the original user prompt/request that triggered the change
</commit_message_guidelines>

<examples>
```text
feat(server): add sentiment analysis endpoint

- Added new /analyze-sentiment endpoint to server.py
- Implemented sentiment analysis tool integration
- User requested: "Add sentiment analysis functionality"
```

```text
fix(database): resolve connection timeout

- Increased connection timeout from 5s to 30s
- Added retry logic for failed connections
- User reported: "Database keeps timing out"
```
</examples>

<commit_hooks>
- Pre-commit hooks run automatically on every commit.
- Any errors should be immediately fixed and the commit should be retried.
- Fix and retry until the commit succeeds.
- If you are unable to fix the error, ask the user for advice (last resort).
</commit_hooks>

<important>
Any errors from the git commit should be taken seriously. Think hard about any error feedback, fix
the problem immediately, then retry until the commit succeeds.

Execute the git commit immediately after completing any code modification, ensuring all changes are
properly staged and committed with descriptive messages that trace back to the original user
request.
</important>

</git_auto_commit>
